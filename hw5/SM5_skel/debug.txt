====== Machine state ======

***** Command *****
[push (n,
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  );
bind shift3;
push 3;
malloc;
bind x;
push x;
store;
push shift3;
push shift3;
push shift3;
push shift3;
push x;
load;
push x;
call;
pop;
malloc;
call;
pop;
malloc;
bind #;
push #;
store;
push #;
load;
put;
push #;
load;
unbind;
pop;
unbind;
pop;
unbind;
pop]

***** Stack *****
[]

***** Environment *****
[]

***** Memory *****


***** Continuation *****


====== Machine state ======

***** Command *****
[bind shift3;
push 3;
malloc;
bind x;
push x;
store;
push shift3;
push shift3;
push shift3;
push shift3;
push x;
load;
push x;
call;
pop;
malloc;
call;
pop;
malloc;
bind #;
push #;
store;
push #;
load;
put;
push #;
load;
unbind;
pop;
unbind;
pop;
unbind;
pop]

***** Stack *****
[(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[]

***** Memory *****


***** Continuation *****


====== Machine state ======

***** Command *****
[push 3;
malloc;
bind x;
push x;
store;
push shift3;
push shift3;
push shift3;
push shift3;
push x;
load;
push x;
call;
pop;
malloc;
call;
pop;
malloc;
bind #;
push #;
store;
push #;
load;
put;
push #;
load;
unbind;
pop;
unbind;
pop;
unbind;
pop]

***** Stack *****
[]

***** Environment *****
[shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Memory *****


***** Continuation *****


====== Machine state ======

***** Command *****
[malloc;
bind x;
push x;
store;
push shift3;
push shift3;
push shift3;
push shift3;
push x;
load;
push x;
call;
pop;
malloc;
call;
pop;
malloc;
bind #;
push #;
store;
push #;
load;
put;
push #;
load;
unbind;
pop;
unbind;
pop;
unbind;
pop]

***** Stack *****
[3]

***** Environment *****
[shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Memory *****


***** Continuation *****


====== Machine state ======

***** Command *****
[bind x;
push x;
store;
push shift3;
push shift3;
push shift3;
push shift3;
push x;
load;
push x;
call;
pop;
malloc;
call;
pop;
malloc;
bind #;
push #;
store;
push #;
load;
put;
push #;
load;
unbind;
pop;
unbind;
pop;
unbind;
pop]

***** Stack *****
[<1, 0>;
3]

***** Environment *****
[shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Memory *****


***** Continuation *****


====== Machine state ======

***** Command *****
[push x;
store;
push shift3;
push shift3;
push shift3;
push shift3;
push x;
load;
push x;
call;
pop;
malloc;
call;
pop;
malloc;
bind #;
push #;
store;
push #;
load;
put;
push #;
load;
unbind;
pop;
unbind;
pop;
unbind;
pop]

***** Stack *****
[3]

***** Environment *****
[x : <1, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Memory *****


***** Continuation *****


====== Machine state ======

***** Command *****
[store;
push shift3;
push shift3;
push shift3;
push shift3;
push x;
load;
push x;
call;
pop;
malloc;
call;
pop;
malloc;
bind #;
push #;
store;
push #;
load;
put;
push #;
load;
unbind;
pop;
unbind;
pop;
unbind;
pop]

***** Stack *****
[<1, 0>;
3]

***** Environment *****
[x : <1, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Memory *****


***** Continuation *****


====== Machine state ======

***** Command *****
[push shift3;
push shift3;
push shift3;
push shift3;
push x;
load;
push x;
call;
pop;
malloc;
call;
pop;
malloc;
bind #;
push #;
store;
push #;
load;
put;
push #;
load;
unbind;
pop;
unbind;
pop;
unbind;
pop]

***** Stack *****
[]

***** Environment *****
[x : <1, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Memory *****
<1, 0> : 3

***** Continuation *****


====== Machine state ======

***** Command *****
[push shift3;
push shift3;
push shift3;
push x;
load;
push x;
call;
pop;
malloc;
call;
pop;
malloc;
bind #;
push #;
store;
push #;
load;
put;
push #;
load;
unbind;
pop;
unbind;
pop;
unbind;
pop]

***** Stack *****
[(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[x : <1, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Memory *****
<1, 0> : 3

***** Continuation *****


====== Machine state ======

***** Command *****
[push shift3;
push shift3;
push x;
load;
push x;
call;
pop;
malloc;
call;
pop;
malloc;
bind #;
push #;
store;
push #;
load;
put;
push #;
load;
unbind;
pop;
unbind;
pop;
unbind;
pop]

***** Stack *****
[(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[x : <1, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Memory *****
<1, 0> : 3

***** Continuation *****


====== Machine state ======

***** Command *****
[push shift3;
push x;
load;
push x;
call;
pop;
malloc;
call;
pop;
malloc;
bind #;
push #;
store;
push #;
load;
put;
push #;
load;
unbind;
pop;
unbind;
pop;
unbind;
pop]

***** Stack *****
[(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[x : <1, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Memory *****
<1, 0> : 3

***** Continuation *****


====== Machine state ======

***** Command *****
[push x;
load;
push x;
call;
pop;
malloc;
call;
pop;
malloc;
bind #;
push #;
store;
push #;
load;
put;
push #;
load;
unbind;
pop;
unbind;
pop;
unbind;
pop]

***** Stack *****
[(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[x : <1, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Memory *****
<1, 0> : 3

***** Continuation *****


====== Machine state ======

***** Command *****
[load;
push x;
call;
pop;
malloc;
call;
pop;
malloc;
bind #;
push #;
store;
push #;
load;
put;
push #;
load;
unbind;
pop;
unbind;
pop;
unbind;
pop]

***** Stack *****
[<1, 0>;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[x : <1, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Memory *****
<1, 0> : 3

***** Continuation *****


====== Machine state ======

***** Command *****
[push x;
call;
pop;
malloc;
call;
pop;
malloc;
bind #;
push #;
store;
push #;
load;
put;
push #;
load;
unbind;
pop;
unbind;
pop;
unbind;
pop]

***** Stack *****
[3;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[x : <1, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Memory *****
<1, 0> : 3

***** Continuation *****


====== Machine state ======

***** Command *****
[call;
pop;
malloc;
call;
pop;
malloc;
bind #;
push #;
store;
push #;
load;
put;
push #;
load;
unbind;
pop;
unbind;
pop;
unbind;
pop]

***** Stack *****
[<1, 0>;
3;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[x : <1, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Memory *****
<1, 0> : 3

***** Continuation *****


====== Machine state ======

***** Command *****
[bind shift3;
push 0;
malloc;
bind i;
push i;
store;
push 1;
malloc;
bind !;
push !;
store;
push 3;
malloc;
bind max@;
push max@;
store;
push (F$,
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  );
bind F@;
push F@;
push F@;
push !;
load;
malloc;
call;
pop;
pop;
push n;
load;
unbind;
pop;
unbind]

***** Stack *****
[(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[n : <1, 0>]

***** Memory *****
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push 0;
malloc;
bind i;
push i;
store;
push 1;
malloc;
bind !;
push !;
store;
push 3;
malloc;
bind max@;
push max@;
store;
push (F$,
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  );
bind F@;
push F@;
push F@;
push !;
load;
malloc;
call;
pop;
pop;
push n;
load;
unbind;
pop;
unbind]

***** Stack *****
[(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[malloc;
bind i;
push i;
store;
push 1;
malloc;
bind !;
push !;
store;
push 3;
malloc;
bind max@;
push max@;
store;
push (F$,
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  );
bind F@;
push F@;
push F@;
push !;
load;
malloc;
call;
pop;
pop;
push n;
load;
unbind;
pop;
unbind]

***** Stack *****
[0;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[bind i;
push i;
store;
push 1;
malloc;
bind !;
push !;
store;
push 3;
malloc;
bind max@;
push max@;
store;
push (F$,
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  );
bind F@;
push F@;
push F@;
push !;
load;
malloc;
call;
pop;
pop;
push n;
load;
unbind;
pop;
unbind]

***** Stack *****
[<2, 0>;
0;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push i;
store;
push 1;
malloc;
bind !;
push !;
store;
push 3;
malloc;
bind max@;
push max@;
store;
push (F$,
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  );
bind F@;
push F@;
push F@;
push !;
load;
malloc;
call;
pop;
pop;
push n;
load;
unbind;
pop;
unbind]

***** Stack *****
[0;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[store;
push 1;
malloc;
bind !;
push !;
store;
push 3;
malloc;
bind max@;
push max@;
store;
push (F$,
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  );
bind F@;
push F@;
push F@;
push !;
load;
malloc;
call;
pop;
pop;
push n;
load;
unbind;
pop;
unbind]

***** Stack *****
[<2, 0>;
0;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push 1;
malloc;
bind !;
push !;
store;
push 3;
malloc;
bind max@;
push max@;
store;
push (F$,
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  );
bind F@;
push F@;
push F@;
push !;
load;
malloc;
call;
pop;
pop;
push n;
load;
unbind;
pop;
unbind]

***** Stack *****
[(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<2, 0> : 0
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[malloc;
bind !;
push !;
store;
push 3;
malloc;
bind max@;
push max@;
store;
push (F$,
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  );
bind F@;
push F@;
push F@;
push !;
load;
malloc;
call;
pop;
pop;
push n;
load;
unbind;
pop;
unbind]

***** Stack *****
[1;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<2, 0> : 0
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[bind !;
push !;
store;
push 3;
malloc;
bind max@;
push max@;
store;
push (F$,
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  );
bind F@;
push F@;
push F@;
push !;
load;
malloc;
call;
pop;
pop;
push n;
load;
unbind;
pop;
unbind]

***** Stack *****
[<3, 0>;
1;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<2, 0> : 0
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push !;
store;
push 3;
malloc;
bind max@;
push max@;
store;
push (F$,
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  );
bind F@;
push F@;
push F@;
push !;
load;
malloc;
call;
pop;
pop;
push n;
load;
unbind;
pop;
unbind]

***** Stack *****
[1;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<2, 0> : 0
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[store;
push 3;
malloc;
bind max@;
push max@;
store;
push (F$,
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  );
bind F@;
push F@;
push F@;
push !;
load;
malloc;
call;
pop;
pop;
push n;
load;
unbind;
pop;
unbind]

***** Stack *****
[<3, 0>;
1;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<2, 0> : 0
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push 3;
malloc;
bind max@;
push max@;
store;
push (F$,
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  );
bind F@;
push F@;
push F@;
push !;
load;
malloc;
call;
pop;
pop;
push n;
load;
unbind;
pop;
unbind]

***** Stack *****
[(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<3, 0> : 1
<2, 0> : 0
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[malloc;
bind max@;
push max@;
store;
push (F$,
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  );
bind F@;
push F@;
push F@;
push !;
load;
malloc;
call;
pop;
pop;
push n;
load;
unbind;
pop;
unbind]

***** Stack *****
[3;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<3, 0> : 1
<2, 0> : 0
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[bind max@;
push max@;
store;
push (F$,
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  );
bind F@;
push F@;
push F@;
push !;
load;
malloc;
call;
pop;
pop;
push n;
load;
unbind;
pop;
unbind]

***** Stack *****
[<4, 0>;
3;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<3, 0> : 1
<2, 0> : 0
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push max@;
store;
push (F$,
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  );
bind F@;
push F@;
push F@;
push !;
load;
malloc;
call;
pop;
pop;
push n;
load;
unbind;
pop;
unbind]

***** Stack *****
[3;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<3, 0> : 1
<2, 0> : 0
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[store;
push (F$,
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  );
bind F@;
push F@;
push F@;
push !;
load;
malloc;
call;
pop;
pop;
push n;
load;
unbind;
pop;
unbind]

***** Stack *****
[<4, 0>;
3;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<3, 0> : 1
<2, 0> : 0
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push (F$,
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  );
bind F@;
push F@;
push F@;
push !;
load;
malloc;
call;
pop;
pop;
push n;
load;
unbind;
pop;
unbind]

***** Stack *****
[(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<4, 0> : 3
<3, 0> : 1
<2, 0> : 0
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[bind F@;
push F@;
push F@;
push !;
load;
malloc;
call;
pop;
pop;
push n;
load;
unbind;
pop;
unbind]

***** Stack *****
[(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<4, 0> : 3
<3, 0> : 1
<2, 0> : 0
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push F@;
push F@;
push !;
load;
malloc;
call;
pop;
pop;
push n;
load;
unbind;
pop;
unbind]

***** Stack *****
[(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<4, 0> : 3
<3, 0> : 1
<2, 0> : 0
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push F@;
push !;
load;
malloc;
call;
pop;
pop;
push n;
load;
unbind;
pop;
unbind]

***** Stack *****
[(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<4, 0> : 3
<3, 0> : 1
<2, 0> : 0
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push !;
load;
malloc;
call;
pop;
pop;
push n;
load;
unbind;
pop;
unbind]

***** Stack *****
[(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<4, 0> : 3
<3, 0> : 1
<2, 0> : 0
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
malloc;
call;
pop;
pop;
push n;
load;
unbind;
pop;
unbind]

***** Stack *****
[<3, 0>;
(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<4, 0> : 3
<3, 0> : 1
<2, 0> : 0
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[malloc;
call;
pop;
pop;
push n;
load;
unbind;
pop;
unbind]

***** Stack *****
[1;
(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<4, 0> : 3
<3, 0> : 1
<2, 0> : 0
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[call;
pop;
pop;
push n;
load;
unbind;
pop;
unbind]

***** Stack *****
[<5, 0>;
1;
(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<4, 0> : 3
<3, 0> : 1
<2, 0> : 0
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[bind F@;
push max@;
load;
push F$;
load;
less;
not;
jtr (
  [push F$;
  load;
  push i;
  store;
  push n;
  load;
  push 1;
  add;
  push n;
  store;
  push n;
  load;
  push F@;
  push F@;
  push F$;
  load;
  push 1;
  add;
  push F$;
  call;
  pop;
  push unit],
  [push unit]);
unbind]

***** Stack *****
[(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 1
<4, 0> : 3
<3, 0> : 1
<2, 0> : 0
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push max@;
load;
push F$;
load;
less;
not;
jtr (
  [push F$;
  load;
  push i;
  store;
  push n;
  load;
  push 1;
  add;
  push n;
  store;
  push n;
  load;
  push F@;
  push F@;
  push F$;
  load;
  push 1;
  add;
  push F$;
  call;
  pop;
  push unit],
  [push unit]);
unbind]

***** Stack *****
[(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 1
<4, 0> : 3
<3, 0> : 1
<2, 0> : 0
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
push F$;
load;
less;
not;
jtr (
  [push F$;
  load;
  push i;
  store;
  push n;
  load;
  push 1;
  add;
  push n;
  store;
  push n;
  load;
  push F@;
  push F@;
  push F$;
  load;
  push 1;
  add;
  push F$;
  call;
  pop;
  push unit],
  [push unit]);
unbind]

***** Stack *****
[<4, 0>;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 1
<4, 0> : 3
<3, 0> : 1
<2, 0> : 0
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push F$;
load;
less;
not;
jtr (
  [push F$;
  load;
  push i;
  store;
  push n;
  load;
  push 1;
  add;
  push n;
  store;
  push n;
  load;
  push F@;
  push F@;
  push F$;
  load;
  push 1;
  add;
  push F$;
  call;
  pop;
  push unit],
  [push unit]);
unbind]

***** Stack *****
[3;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 1
<4, 0> : 3
<3, 0> : 1
<2, 0> : 0
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
less;
not;
jtr (
  [push F$;
  load;
  push i;
  store;
  push n;
  load;
  push 1;
  add;
  push n;
  store;
  push n;
  load;
  push F@;
  push F@;
  push F$;
  load;
  push 1;
  add;
  push F$;
  call;
  pop;
  push unit],
  [push unit]);
unbind]

***** Stack *****
[<5, 0>;
3;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 1
<4, 0> : 3
<3, 0> : 1
<2, 0> : 0
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[less;
not;
jtr (
  [push F$;
  load;
  push i;
  store;
  push n;
  load;
  push 1;
  add;
  push n;
  store;
  push n;
  load;
  push F@;
  push F@;
  push F$;
  load;
  push 1;
  add;
  push F$;
  call;
  pop;
  push unit],
  [push unit]);
unbind]

***** Stack *****
[1;
3;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 1
<4, 0> : 3
<3, 0> : 1
<2, 0> : 0
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[not;
jtr (
  [push F$;
  load;
  push i;
  store;
  push n;
  load;
  push 1;
  add;
  push n;
  store;
  push n;
  load;
  push F@;
  push F@;
  push F$;
  load;
  push 1;
  add;
  push F$;
  call;
  pop;
  push unit],
  [push unit]);
unbind]

***** Stack *****
[false;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 1
<4, 0> : 3
<3, 0> : 1
<2, 0> : 0
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[jtr (
  [push F$;
  load;
  push i;
  store;
  push n;
  load;
  push 1;
  add;
  push n;
  store;
  push n;
  load;
  push F@;
  push F@;
  push F$;
  load;
  push 1;
  add;
  push F$;
  call;
  pop;
  push unit],
  [push unit]);
unbind]

***** Stack *****
[true;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 1
<4, 0> : 3
<3, 0> : 1
<2, 0> : 0
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push F$;
load;
push i;
store;
push n;
load;
push 1;
add;
push n;
store;
push n;
load;
push F@;
push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 1
<4, 0> : 3
<3, 0> : 1
<2, 0> : 0
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
push i;
store;
push n;
load;
push 1;
add;
push n;
store;
push n;
load;
push F@;
push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[<5, 0>;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 1
<4, 0> : 3
<3, 0> : 1
<2, 0> : 0
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push i;
store;
push n;
load;
push 1;
add;
push n;
store;
push n;
load;
push F@;
push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[1;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 1
<4, 0> : 3
<3, 0> : 1
<2, 0> : 0
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[store;
push n;
load;
push 1;
add;
push n;
store;
push n;
load;
push F@;
push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[<2, 0>;
1;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 1
<4, 0> : 3
<3, 0> : 1
<2, 0> : 0
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push n;
load;
push 1;
add;
push n;
store;
push n;
load;
push F@;
push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<2, 0> : 1
<5, 0> : 1
<4, 0> : 3
<3, 0> : 1
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
push 1;
add;
push n;
store;
push n;
load;
push F@;
push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[<1, 0>;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<2, 0> : 1
<5, 0> : 1
<4, 0> : 3
<3, 0> : 1
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push 1;
add;
push n;
store;
push n;
load;
push F@;
push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[3;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<2, 0> : 1
<5, 0> : 1
<4, 0> : 3
<3, 0> : 1
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[add;
push n;
store;
push n;
load;
push F@;
push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[1;
3;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<2, 0> : 1
<5, 0> : 1
<4, 0> : 3
<3, 0> : 1
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push n;
store;
push n;
load;
push F@;
push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<2, 0> : 1
<5, 0> : 1
<4, 0> : 3
<3, 0> : 1
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[store;
push n;
load;
push F@;
push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[<1, 0>;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<2, 0> : 1
<5, 0> : 1
<4, 0> : 3
<3, 0> : 1
<1, 0> : 3

***** Continuation *****
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push n;
load;
push F@;
push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<1, 0> : 4
<2, 0> : 1
<5, 0> : 1
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
push F@;
push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[<1, 0>;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<1, 0> : 4
<2, 0> : 1
<5, 0> : 1
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push F@;
push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<1, 0> : 4
<2, 0> : 1
<5, 0> : 1
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<1, 0> : 4
<2, 0> : 1
<5, 0> : 1
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<1, 0> : 4
<2, 0> : 1
<5, 0> : 1
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[<5, 0>;
(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<1, 0> : 4
<2, 0> : 1
<5, 0> : 1
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[1;
(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<1, 0> : 4
<2, 0> : 1
<5, 0> : 1
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[1;
1;
(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<1, 0> : 4
<2, 0> : 1
<5, 0> : 1
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[2;
(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<1, 0> : 4
<2, 0> : 1
<5, 0> : 1
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[call;
pop;
push unit;
unbind]

***** Stack *****
[<5, 0>;
2;
(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<1, 0> : 4
<2, 0> : 1
<5, 0> : 1
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[bind F@;
push max@;
load;
push F$;
load;
less;
not;
jtr (
  [push F$;
  load;
  push i;
  store;
  push n;
  load;
  push 1;
  add;
  push n;
  store;
  push n;
  load;
  push F@;
  push F@;
  push F$;
  load;
  push 1;
  add;
  push F$;
  call;
  pop;
  push unit],
  [push unit]);
unbind]

***** Stack *****
[(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 2
<1, 0> : 4
<2, 0> : 1
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push max@;
load;
push F$;
load;
less;
not;
jtr (
  [push F$;
  load;
  push i;
  store;
  push n;
  load;
  push 1;
  add;
  push n;
  store;
  push n;
  load;
  push F@;
  push F@;
  push F$;
  load;
  push 1;
  add;
  push F$;
  call;
  pop;
  push unit],
  [push unit]);
unbind]

***** Stack *****
[4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 2
<1, 0> : 4
<2, 0> : 1
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
push F$;
load;
less;
not;
jtr (
  [push F$;
  load;
  push i;
  store;
  push n;
  load;
  push 1;
  add;
  push n;
  store;
  push n;
  load;
  push F@;
  push F@;
  push F$;
  load;
  push 1;
  add;
  push F$;
  call;
  pop;
  push unit],
  [push unit]);
unbind]

***** Stack *****
[<4, 0>;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 2
<1, 0> : 4
<2, 0> : 1
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push F$;
load;
less;
not;
jtr (
  [push F$;
  load;
  push i;
  store;
  push n;
  load;
  push 1;
  add;
  push n;
  store;
  push n;
  load;
  push F@;
  push F@;
  push F$;
  load;
  push 1;
  add;
  push F$;
  call;
  pop;
  push unit],
  [push unit]);
unbind]

***** Stack *****
[3;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 2
<1, 0> : 4
<2, 0> : 1
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
less;
not;
jtr (
  [push F$;
  load;
  push i;
  store;
  push n;
  load;
  push 1;
  add;
  push n;
  store;
  push n;
  load;
  push F@;
  push F@;
  push F$;
  load;
  push 1;
  add;
  push F$;
  call;
  pop;
  push unit],
  [push unit]);
unbind]

***** Stack *****
[<5, 0>;
3;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 2
<1, 0> : 4
<2, 0> : 1
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[less;
not;
jtr (
  [push F$;
  load;
  push i;
  store;
  push n;
  load;
  push 1;
  add;
  push n;
  store;
  push n;
  load;
  push F@;
  push F@;
  push F$;
  load;
  push 1;
  add;
  push F$;
  call;
  pop;
  push unit],
  [push unit]);
unbind]

***** Stack *****
[2;
3;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 2
<1, 0> : 4
<2, 0> : 1
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[not;
jtr (
  [push F$;
  load;
  push i;
  store;
  push n;
  load;
  push 1;
  add;
  push n;
  store;
  push n;
  load;
  push F@;
  push F@;
  push F$;
  load;
  push 1;
  add;
  push F$;
  call;
  pop;
  push unit],
  [push unit]);
unbind]

***** Stack *****
[false;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 2
<1, 0> : 4
<2, 0> : 1
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[jtr (
  [push F$;
  load;
  push i;
  store;
  push n;
  load;
  push 1;
  add;
  push n;
  store;
  push n;
  load;
  push F@;
  push F@;
  push F$;
  load;
  push 1;
  add;
  push F$;
  call;
  pop;
  push unit],
  [push unit]);
unbind]

***** Stack *****
[true;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 2
<1, 0> : 4
<2, 0> : 1
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push F$;
load;
push i;
store;
push n;
load;
push 1;
add;
push n;
store;
push n;
load;
push F@;
push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 2
<1, 0> : 4
<2, 0> : 1
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
push i;
store;
push n;
load;
push 1;
add;
push n;
store;
push n;
load;
push F@;
push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[<5, 0>;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 2
<1, 0> : 4
<2, 0> : 1
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push i;
store;
push n;
load;
push 1;
add;
push n;
store;
push n;
load;
push F@;
push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[2;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 2
<1, 0> : 4
<2, 0> : 1
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[store;
push n;
load;
push 1;
add;
push n;
store;
push n;
load;
push F@;
push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[<2, 0>;
2;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 2
<1, 0> : 4
<2, 0> : 1
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push n;
load;
push 1;
add;
push n;
store;
push n;
load;
push F@;
push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<2, 0> : 2
<5, 0> : 2
<1, 0> : 4
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
push 1;
add;
push n;
store;
push n;
load;
push F@;
push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[<1, 0>;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<2, 0> : 2
<5, 0> : 2
<1, 0> : 4
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push 1;
add;
push n;
store;
push n;
load;
push F@;
push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[4;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<2, 0> : 2
<5, 0> : 2
<1, 0> : 4
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[add;
push n;
store;
push n;
load;
push F@;
push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[1;
4;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<2, 0> : 2
<5, 0> : 2
<1, 0> : 4
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push n;
store;
push n;
load;
push F@;
push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<2, 0> : 2
<5, 0> : 2
<1, 0> : 4
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[store;
push n;
load;
push F@;
push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[<1, 0>;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<2, 0> : 2
<5, 0> : 2
<1, 0> : 4
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push n;
load;
push F@;
push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<1, 0> : 5
<2, 0> : 2
<5, 0> : 2
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
push F@;
push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[<1, 0>;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<1, 0> : 5
<2, 0> : 2
<5, 0> : 2
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push F@;
push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<1, 0> : 5
<2, 0> : 2
<5, 0> : 2
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<1, 0> : 5
<2, 0> : 2
<5, 0> : 2
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<1, 0> : 5
<2, 0> : 2
<5, 0> : 2
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[<5, 0>;
(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<1, 0> : 5
<2, 0> : 2
<5, 0> : 2
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[2;
(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<1, 0> : 5
<2, 0> : 2
<5, 0> : 2
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[1;
2;
(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<1, 0> : 5
<2, 0> : 2
<5, 0> : 2
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[3;
(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<1, 0> : 5
<2, 0> : 2
<5, 0> : 2
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[call;
pop;
push unit;
unbind]

***** Stack *****
[<5, 0>;
3;
(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<1, 0> : 5
<2, 0> : 2
<5, 0> : 2
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[bind F@;
push max@;
load;
push F$;
load;
less;
not;
jtr (
  [push F$;
  load;
  push i;
  store;
  push n;
  load;
  push 1;
  add;
  push n;
  store;
  push n;
  load;
  push F@;
  push F@;
  push F$;
  load;
  push 1;
  add;
  push F$;
  call;
  pop;
  push unit],
  [push unit]);
unbind]

***** Stack *****
[(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 3
<1, 0> : 5
<2, 0> : 2
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push max@;
load;
push F$;
load;
less;
not;
jtr (
  [push F$;
  load;
  push i;
  store;
  push n;
  load;
  push 1;
  add;
  push n;
  store;
  push n;
  load;
  push F@;
  push F@;
  push F$;
  load;
  push 1;
  add;
  push F$;
  call;
  pop;
  push unit],
  [push unit]);
unbind]

***** Stack *****
[5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 3
<1, 0> : 5
<2, 0> : 2
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
push F$;
load;
less;
not;
jtr (
  [push F$;
  load;
  push i;
  store;
  push n;
  load;
  push 1;
  add;
  push n;
  store;
  push n;
  load;
  push F@;
  push F@;
  push F$;
  load;
  push 1;
  add;
  push F$;
  call;
  pop;
  push unit],
  [push unit]);
unbind]

***** Stack *****
[<4, 0>;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 3
<1, 0> : 5
<2, 0> : 2
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push F$;
load;
less;
not;
jtr (
  [push F$;
  load;
  push i;
  store;
  push n;
  load;
  push 1;
  add;
  push n;
  store;
  push n;
  load;
  push F@;
  push F@;
  push F$;
  load;
  push 1;
  add;
  push F$;
  call;
  pop;
  push unit],
  [push unit]);
unbind]

***** Stack *****
[3;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 3
<1, 0> : 5
<2, 0> : 2
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
less;
not;
jtr (
  [push F$;
  load;
  push i;
  store;
  push n;
  load;
  push 1;
  add;
  push n;
  store;
  push n;
  load;
  push F@;
  push F@;
  push F$;
  load;
  push 1;
  add;
  push F$;
  call;
  pop;
  push unit],
  [push unit]);
unbind]

***** Stack *****
[<5, 0>;
3;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 3
<1, 0> : 5
<2, 0> : 2
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[less;
not;
jtr (
  [push F$;
  load;
  push i;
  store;
  push n;
  load;
  push 1;
  add;
  push n;
  store;
  push n;
  load;
  push F@;
  push F@;
  push F$;
  load;
  push 1;
  add;
  push F$;
  call;
  pop;
  push unit],
  [push unit]);
unbind]

***** Stack *****
[3;
3;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 3
<1, 0> : 5
<2, 0> : 2
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[not;
jtr (
  [push F$;
  load;
  push i;
  store;
  push n;
  load;
  push 1;
  add;
  push n;
  store;
  push n;
  load;
  push F@;
  push F@;
  push F$;
  load;
  push 1;
  add;
  push F$;
  call;
  pop;
  push unit],
  [push unit]);
unbind]

***** Stack *****
[false;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 3
<1, 0> : 5
<2, 0> : 2
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[jtr (
  [push F$;
  load;
  push i;
  store;
  push n;
  load;
  push 1;
  add;
  push n;
  store;
  push n;
  load;
  push F@;
  push F@;
  push F$;
  load;
  push 1;
  add;
  push F$;
  call;
  pop;
  push unit],
  [push unit]);
unbind]

***** Stack *****
[true;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 3
<1, 0> : 5
<2, 0> : 2
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push F$;
load;
push i;
store;
push n;
load;
push 1;
add;
push n;
store;
push n;
load;
push F@;
push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 3
<1, 0> : 5
<2, 0> : 2
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
push i;
store;
push n;
load;
push 1;
add;
push n;
store;
push n;
load;
push F@;
push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[<5, 0>;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 3
<1, 0> : 5
<2, 0> : 2
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push i;
store;
push n;
load;
push 1;
add;
push n;
store;
push n;
load;
push F@;
push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[3;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 3
<1, 0> : 5
<2, 0> : 2
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[store;
push n;
load;
push 1;
add;
push n;
store;
push n;
load;
push F@;
push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[<2, 0>;
3;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 3
<1, 0> : 5
<2, 0> : 2
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push n;
load;
push 1;
add;
push n;
store;
push n;
load;
push F@;
push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<2, 0> : 3
<5, 0> : 3
<1, 0> : 5
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
push 1;
add;
push n;
store;
push n;
load;
push F@;
push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[<1, 0>;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<2, 0> : 3
<5, 0> : 3
<1, 0> : 5
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push 1;
add;
push n;
store;
push n;
load;
push F@;
push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[5;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<2, 0> : 3
<5, 0> : 3
<1, 0> : 5
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[add;
push n;
store;
push n;
load;
push F@;
push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[1;
5;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<2, 0> : 3
<5, 0> : 3
<1, 0> : 5
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push n;
store;
push n;
load;
push F@;
push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<2, 0> : 3
<5, 0> : 3
<1, 0> : 5
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[store;
push n;
load;
push F@;
push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[<1, 0>;
6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<2, 0> : 3
<5, 0> : 3
<1, 0> : 5
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push n;
load;
push F@;
push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<1, 0> : 6
<2, 0> : 3
<5, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
push F@;
push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[<1, 0>;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<1, 0> : 6
<2, 0> : 3
<5, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push F@;
push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<1, 0> : 6
<2, 0> : 3
<5, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push F@;
push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<1, 0> : 6
<2, 0> : 3
<5, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push F$;
load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<1, 0> : 6
<2, 0> : 3
<5, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[<5, 0>;
(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<1, 0> : 6
<2, 0> : 3
<5, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push 1;
add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[3;
(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<1, 0> : 6
<2, 0> : 3
<5, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[add;
push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[1;
3;
(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<1, 0> : 6
<2, 0> : 3
<5, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push F$;
call;
pop;
push unit;
unbind]

***** Stack *****
[4;
(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<1, 0> : 6
<2, 0> : 3
<5, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[call;
pop;
push unit;
unbind]

***** Stack *****
[<5, 0>;
4;
(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<1, 0> : 6
<2, 0> : 3
<5, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[bind F@;
push max@;
load;
push F$;
load;
less;
not;
jtr (
  [push F$;
  load;
  push i;
  store;
  push n;
  load;
  push 1;
  add;
  push n;
  store;
  push n;
  load;
  push F@;
  push F@;
  push F$;
  load;
  push 1;
  add;
  push F$;
  call;
  pop;
  push unit],
  [push unit]);
unbind]

***** Stack *****
[(fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 4
<1, 0> : 6
<2, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push max@;
load;
push F$;
load;
less;
not;
jtr (
  [push F$;
  load;
  push i;
  store;
  push n;
  load;
  push 1;
  add;
  push n;
  store;
  push n;
  load;
  push F@;
  push F@;
  push F$;
  load;
  push 1;
  add;
  push F$;
  call;
  pop;
  push unit],
  [push unit]);
unbind]

***** Stack *****
[6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 4
<1, 0> : 6
<2, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
push F$;
load;
less;
not;
jtr (
  [push F$;
  load;
  push i;
  store;
  push n;
  load;
  push 1;
  add;
  push n;
  store;
  push n;
  load;
  push F@;
  push F@;
  push F$;
  load;
  push 1;
  add;
  push F$;
  call;
  pop;
  push unit],
  [push unit]);
unbind]

***** Stack *****
[<4, 0>;
6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 4
<1, 0> : 6
<2, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push F$;
load;
less;
not;
jtr (
  [push F$;
  load;
  push i;
  store;
  push n;
  load;
  push 1;
  add;
  push n;
  store;
  push n;
  load;
  push F@;
  push F@;
  push F$;
  load;
  push 1;
  add;
  push F$;
  call;
  pop;
  push unit],
  [push unit]);
unbind]

***** Stack *****
[3;
6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 4
<1, 0> : 6
<2, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
less;
not;
jtr (
  [push F$;
  load;
  push i;
  store;
  push n;
  load;
  push 1;
  add;
  push n;
  store;
  push n;
  load;
  push F@;
  push F@;
  push F$;
  load;
  push 1;
  add;
  push F$;
  call;
  pop;
  push unit],
  [push unit]);
unbind]

***** Stack *****
[<5, 0>;
3;
6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 4
<1, 0> : 6
<2, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[less;
not;
jtr (
  [push F$;
  load;
  push i;
  store;
  push n;
  load;
  push 1;
  add;
  push n;
  store;
  push n;
  load;
  push F@;
  push F@;
  push F$;
  load;
  push 1;
  add;
  push F$;
  call;
  pop;
  push unit],
  [push unit]);
unbind]

***** Stack *****
[4;
3;
6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 4
<1, 0> : 6
<2, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[not;
jtr (
  [push F$;
  load;
  push i;
  store;
  push n;
  load;
  push 1;
  add;
  push n;
  store;
  push n;
  load;
  push F@;
  push F@;
  push F$;
  load;
  push 1;
  add;
  push F$;
  call;
  pop;
  push unit],
  [push unit]);
unbind]

***** Stack *****
[true;
6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 4
<1, 0> : 6
<2, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[jtr (
  [push F$;
  load;
  push i;
  store;
  push n;
  load;
  push 1;
  add;
  push n;
  store;
  push n;
  load;
  push F@;
  push F@;
  push F$;
  load;
  push 1;
  add;
  push F$;
  call;
  pop;
  push unit],
  [push unit]);
unbind]

***** Stack *****
[false;
6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 4
<1, 0> : 6
<2, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push unit;
unbind]

***** Stack *****
[6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 4
<1, 0> : 6
<2, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[unbind]

***** Stack *****
[unit;
6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 4
<1, 0> : 6
<2, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[]

***** Stack *****
[(F@, (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]);
unit;
6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 4
<1, 0> : 6
<2, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[pop;
push unit;
unbind]

***** Stack *****
[(F@, (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]);
unit;
6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 4
<1, 0> : 6
<2, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push unit;
unbind]

***** Stack *****
[unit;
6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 4
<1, 0> : 6
<2, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[unbind]

***** Stack *****
[unit;
unit;
6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 4
<1, 0> : 6
<2, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[]

***** Stack *****
[(F@, (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]);
unit;
unit;
6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 4
<1, 0> : 6
<2, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[pop;
push unit;
unbind]

***** Stack *****
[(F@, (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]);
unit;
unit;
6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 4
<1, 0> : 6
<2, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push unit;
unbind]

***** Stack *****
[unit;
unit;
6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 4
<1, 0> : 6
<2, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[unbind]

***** Stack *****
[unit;
unit;
unit;
6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 4
<1, 0> : 6
<2, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[]

***** Stack *****
[(F@, (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]);
unit;
unit;
unit;
6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 4
<1, 0> : 6
<2, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  push unit;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  F$ : <5, 0>;
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[pop;
push unit;
unbind]

***** Stack *****
[(F@, (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]);
unit;
unit;
unit;
6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 4
<1, 0> : 6
<2, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push unit;
unbind]

***** Stack *****
[unit;
unit;
unit;
6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 4
<1, 0> : 6
<2, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[unbind]

***** Stack *****
[unit;
unit;
unit;
unit;
6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 4
<1, 0> : 6
<2, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[]

***** Stack *****
[(F@, (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]);
unit;
unit;
unit;
unit;
6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F$ : <5, 0>;
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 4
<1, 0> : 6
<2, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
Env :
  [F@ : (fun F$ ->
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    ), Env =
    [max@ : <4, 0>;
    ! : <3, 0>;
    i : <2, 0>;
    shift3 : (fun n ->
      [bind shift3;
      push 0;
      malloc;
      bind i;
      push i;
      store;
      push 1;
      malloc;
      bind !;
      push !;
      store;
      push 3;
      malloc;
      bind max@;
      push max@;
      store;
      push (F$,
        [bind F@;
        push max@;
        load;
        push F$;
        load;
        less;
        not;
        jtr (
          [push F$;
          load;
          push i;
          store;
          push n;
          load;
          push 1;
          add;
          push n;
          store;
          push n;
          load;
          push F@;
          push F@;
          push F$;
          load;
          push 1;
          add;
          push F$;
          call;
          pop;
          push unit],
          [push unit]);
        unbind]
        );
      bind F@;
      push F@;
      push F@;
      push !;
      load;
      malloc;
      call;
      pop;
      pop;
      push n;
      load;
      unbind;
      pop;
      unbind]
      ), Env =
      [];
    n : <1, 0>];
  max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]
----------
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[pop;
pop;
push n;
load;
unbind;
pop;
unbind]

***** Stack *****
[(F@, (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]);
unit;
unit;
unit;
unit;
6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 4
<1, 0> : 6
<2, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[pop;
push n;
load;
unbind;
pop;
unbind]

***** Stack *****
[unit;
unit;
unit;
unit;
6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 4
<1, 0> : 6
<2, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[push n;
load;
unbind;
pop;
unbind]

***** Stack *****
[unit;
unit;
unit;
6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 4
<1, 0> : 6
<2, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[load;
unbind;
pop;
unbind]

***** Stack *****
[<1, 0>;
unit;
unit;
unit;
6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 4
<1, 0> : 6
<2, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[unbind;
pop;
unbind]

***** Stack *****
[6;
unit;
unit;
unit;
6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[F@ : (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>];
max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 4
<1, 0> : 6
<2, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[pop;
unbind]

***** Stack *****
[(F@, (fun F$ ->
  [bind F@;
  push max@;
  load;
  push F$;
  load;
  less;
  not;
  jtr (
    [push F$;
    load;
    push i;
    store;
    push n;
    load;
    push 1;
    add;
    push n;
    store;
    push n;
    load;
    push F@;
    push F@;
    push F$;
    load;
    push 1;
    add;
    push F$;
    call;
    pop;
    push unit],
    [push unit]);
  unbind]
  ), Env =
  [max@ : <4, 0>;
  ! : <3, 0>;
  i : <2, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    [];
  n : <1, 0>]);
6;
unit;
unit;
unit;
6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 4
<1, 0> : 6
<2, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[unbind]

***** Stack *****
[6;
unit;
unit;
unit;
6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[max@ : <4, 0>;
! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 4
<1, 0> : 6
<2, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[]

***** Stack *****
[(max@, <4, 0>);
6;
unit;
unit;
unit;
6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[! : <3, 0>;
i : <2, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
n : <1, 0>]

***** Memory *****
<5, 0> : 4
<1, 0> : 6
<2, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****
Command :
  [pop;
  malloc;
  call;
  pop;
  malloc;
  bind #;
  push #;
  store;
  push #;
  load;
  put;
  push #;
  load;
  unbind;
  pop;
  unbind;
  pop;
  unbind;
  pop]
Env :
  [x : <1, 0>;
  shift3 : (fun n ->
    [bind shift3;
    push 0;
    malloc;
    bind i;
    push i;
    store;
    push 1;
    malloc;
    bind !;
    push !;
    store;
    push 3;
    malloc;
    bind max@;
    push max@;
    store;
    push (F$,
      [bind F@;
      push max@;
      load;
      push F$;
      load;
      less;
      not;
      jtr (
        [push F$;
        load;
        push i;
        store;
        push n;
        load;
        push 1;
        add;
        push n;
        store;
        push n;
        load;
        push F@;
        push F@;
        push F$;
        load;
        push 1;
        add;
        push F$;
        call;
        pop;
        push unit],
        [push unit]);
      unbind]
      );
    bind F@;
    push F@;
    push F@;
    push !;
    load;
    malloc;
    call;
    pop;
    pop;
    push n;
    load;
    unbind;
    pop;
    unbind]
    ), Env =
    []]

====== Machine state ======

***** Command *****
[pop;
malloc;
call;
pop;
malloc;
bind #;
push #;
store;
push #;
load;
put;
push #;
load;
unbind;
pop;
unbind;
pop;
unbind;
pop]

***** Stack *****
[(max@, <4, 0>);
6;
unit;
unit;
unit;
6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[x : <1, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Memory *****
<5, 0> : 4
<1, 0> : 6
<2, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****


====== Machine state ======

***** Command *****
[malloc;
call;
pop;
malloc;
bind #;
push #;
store;
push #;
load;
put;
push #;
load;
unbind;
pop;
unbind;
pop;
unbind;
pop]

***** Stack *****
[6;
unit;
unit;
unit;
6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[x : <1, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Memory *****
<5, 0> : 4
<1, 0> : 6
<2, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****


====== Machine state ======

***** Command *****
[call;
pop;
malloc;
bind #;
push #;
store;
push #;
load;
put;
push #;
load;
unbind;
pop;
unbind;
pop;
unbind;
pop]

***** Stack *****
[<6, 0>;
6;
unit;
unit;
unit;
6;
5;
4;
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  [];
(fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Environment *****
[x : <1, 0>;
shift3 : (fun n ->
  [bind shift3;
  push 0;
  malloc;
  bind i;
  push i;
  store;
  push 1;
  malloc;
  bind !;
  push !;
  store;
  push 3;
  malloc;
  bind max@;
  push max@;
  store;
  push (F$,
    [bind F@;
    push max@;
    load;
    push F$;
    load;
    less;
    not;
    jtr (
      [push F$;
      load;
      push i;
      store;
      push n;
      load;
      push 1;
      add;
      push n;
      store;
      push n;
      load;
      push F@;
      push F@;
      push F$;
      load;
      push 1;
      add;
      push F$;
      call;
      pop;
      push unit],
      [push unit]);
    unbind]
    );
  bind F@;
  push F@;
  push F@;
  push !;
  load;
  malloc;
  call;
  pop;
  pop;
  push n;
  load;
  unbind;
  pop;
  unbind]
  ), Env =
  []]

***** Memory *****
<5, 0> : 4
<1, 0> : 6
<2, 0> : 3
<4, 0> : 3
<3, 0> : 1

***** Continuation *****


